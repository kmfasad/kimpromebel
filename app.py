import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router

bot = Bot(token="7980968906:AAHlFiJRX9K0dkeMZw3M87Qszgm68E4IdOI")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

ADMIN_ID = 433698201  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")],
        [KeyboardButton(text="üõ† –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")]
    ],
    resize_keyboard=True
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Consultation(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()

class ProjectOrder(StatesGroup):
    waiting_for_description = State()
    waiting_for_name = State()
    waiting_for_phone = State()

# /start
@router.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ö–ò–ú. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá",
        reply_markup=main_kb
    )

# –ö–Ω–æ–ø–∫–∞ "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
@router.message(F.text == "‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
async def start_consultation(message: types.Message, state: FSMContext):
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? ‚úçÔ∏è")
    await state.set_state(Consultation.waiting_for_name)

@router.message(Consultation.waiting_for_name)
async def consultation_get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(f"{message.text}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±")
    await state.set_state(Consultation.waiting_for_phone)

@router.message(Consultation.waiting_for_phone)
async def consultation_get_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è! üôå")
    await bot.send_message(
        ADMIN_ID,
        f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üÜî –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username or '–±–µ–∑ username'}"
    )
    await state.clear()

# –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–µ–∫—Ç"
@router.message(F.text == "üõ† –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
async def start_project(message: types.Message, state: FSMContext):
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üìêüõã")
    await state.set_state(ProjectOrder.waiting_for_description)

@router.message(ProjectOrder.waiting_for_description)
async def project_get_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? ‚úçÔ∏è")
    await state.set_state(ProjectOrder.waiting_for_name)

@router.message(ProjectOrder.waiting_for_name)
async def project_get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(f"{message.text}, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±")
    await state.set_state(ProjectOrder.waiting_for_phone)

@router.message(ProjectOrder.waiting_for_phone)
async def project_get_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. üôå")
    await bot.send_message(
        ADMIN_ID,
        f"üìê –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
        f"üìù –ü—Ä–æ–µ–∫—Ç: {data['description']}\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üÜî –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username or '–±–µ–∑ username'}"
    )
    await state.clear()

# –ö–Ω–æ–ø–∫–∞ "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def send_contacts(message: types.Message):
    await message.answer(
        "üìß Email: kimpromebel@gmail.com\n"
        "üì© Telegram: @mihailkuvila"
    )

# –§–æ–ª–±—ç–∫ ‚Äî –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç
@router.message()
async def fallback(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º—É üìù")

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
