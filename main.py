import os
import asyncio
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# ------------------- –ö–æ–Ω—Ñ–∏–≥ -------------------
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "433698201"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if TOKEN and WEBHOOK_URL:
    WEBHOOK_PATH = f"/webhook/{TOKEN}"
else:
    WEBHOOK_PATH = "/webhook"

if not TOKEN:
    raise ValueError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# ------------------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã -------------------
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")],
        [KeyboardButton(text="üõ† –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")]
    ],
    resize_keyboard=True
)
cancel_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]], resize_keyboard=True, one_time_keyboard=True)
phone_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)],
              [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
    resize_keyboard=True
)
confirm_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")],
              [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
    resize_keyboard=True
)

# ------------------- —Å–æ—Å—Ç–æ—è–Ω–∏—è -------------------
class Consultation(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_confirm = State()

class ProjectOrder(StatesGroup):
    waiting_for_description = State()
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_confirm = State()

# ------------------- handlers -------------------
@router.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ö–ò–ú. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá", reply_markup=main_kb)

@router.message(Command("setwebhook"))
async def cmd_setwebhook(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
        
    if WEBHOOK_URL and TOKEN:
        webhook_url = f"{WEBHOOK_URL}/webhook/{TOKEN}"
        try:
            await bot.set_webhook(webhook_url)
            await message.answer(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("‚ùå WEBHOOK_URL –∏–ª–∏ TOKEN –Ω–µ –∑–∞–¥–∞–Ω—ã.")

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_any(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå", reply_markup=main_kb)

@router.message(F.text == "‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
async def start_consultation(message: types.Message, state: FSMContext):
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? ‚úçÔ∏è", reply_markup=cancel_kb)
    await state.set_state(Consultation.waiting_for_name)

@router.message(Consultation.waiting_for_name)
async def consult_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±", reply_markup=phone_kb)
    await state.set_state(Consultation.waiting_for_phone)

@router.message(F.contact, Consultation.waiting_for_phone)
async def consult_contact(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await ask_confirm(message, state, from_project=False)

@router.message(Consultation.waiting_for_phone)
async def consult_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await ask_confirm(message, state, from_project=False)

@router.message(F.text == "üõ† –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
async def start_project(message: types.Message, state: FSMContext):
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üìêüõã", reply_markup=cancel_kb)
    await state.set_state(ProjectOrder.waiting_for_description)

@router.message(ProjectOrder.waiting_for_description)
async def project_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? ‚úçÔ∏è", reply_markup=cancel_kb)
    await state.set_state(ProjectOrder.waiting_for_name)

@router.message(ProjectOrder.waiting_for_name)
async def project_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±", reply_markup=phone_kb)
    await state.set_state(ProjectOrder.waiting_for_phone)

@router.message(F.contact, ProjectOrder.waiting_for_phone)
async def project_contact(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await ask_confirm(message, state, from_project=True)

@router.message(ProjectOrder.waiting_for_phone)
async def project_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await ask_confirm(message, state, from_project=True)

@router.message(F.text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")
async def confirm_submission(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_state = await state.get_state()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –∏–º–µ–Ω–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if not current_state or not (current_state.startswith("Consultation:waiting_for_confirm") or current_state.startswith("ProjectOrder:waiting_for_confirm")):
        await message.answer("–ù–µ—á–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_kb)
        await state.clear()
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏
    if current_state.startswith("Consultation"):
        text_to_admin = f"""
üìû <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ</b>

üë§ <b>–ò–º—è:</b> {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚è∞ <b>–í—Ä–µ–º—è:</b> {message.date.strftime('%d.%m.%Y %H:%M')}
        """
        await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. üôå", reply_markup=main_kb)
        await bot.send_message(ADMIN_ID, text_to_admin, parse_mode="HTML")
        
    elif current_state.startswith("ProjectOrder"):
        text_to_admin = f"""
üõ† <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó –ü–†–û–ï–ö–¢–ê</b>

üìê <b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b>
{data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üë§ <b>–ò–º—è:</b> {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚è∞ <b>–í—Ä–µ–º—è:</b> {message.date.strftime('%d.%m.%Y %H:%M')}
        """
        await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. üôå", reply_markup=main_kb)
        await bot.send_message(ADMIN_ID, text_to_admin, parse_mode="HTML")

    await state.clear()

async def ask_confirm(message: types.Message, state: FSMContext, from_project: bool):
    data = await state.get_data()
    text = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏ üëá\n\n"
    if from_project:
        text += f"–ü—Ä–æ–µ–∫—Ç: {data.get('description')}\n–ò–º—è: {data.get('name')}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}"
        await state.set_state(ProjectOrder.waiting_for_confirm)
    else:
        text += f"–ò–º—è: {data.get('name')}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}"
        await state.set_state(Consultation.waiting_for_confirm)
    await message.answer(text, reply_markup=confirm_kb)

@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def send_contacts(message: types.Message):
    await message.answer("Email: kimpromebel@gmail.com\nTelegram: @mihailkuvila")

# fallback
@router.message()
async def fallback(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=main_kb)
    else:
        await message.answer("–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ñ–æ—Ä–º—É üìù –∏–ª–∏ ‚ùå –û—Ç–º–µ–Ω–∏—Ç–µ", reply_markup=cancel_kb)

# FastAPI
app = FastAPI()

@app.on_event("startup")
async def on_startup():
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
    await bot.delete_webhook()
    await asyncio.sleep(1)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ URL –∑–∞–¥–∞–Ω
    if WEBHOOK_URL and TOKEN:
        webhook_url = f"{WEBHOOK_URL}/webhook/{TOKEN}"
        print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫: {webhook_url}")
        try:
            await bot.set_webhook(webhook_url)
            print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:", e)
    else:
        print("WEBHOOK_URL –∏–ª–∏ TOKEN –Ω–µ –∑–∞–¥–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É webhook")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()

@app.post("/webhook/{token}")
async def webhook(request: Request, token: str):
    if token == TOKEN:
        update = types.Update(**await request.json())
        await dp.feed_update(bot, update)
        return {"ok": True}
    else:
        return {"error": "Invalid token"}

if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8080))
    uvicorn.run("main:app", host="0.0.0.0", port=port)
