import os
import asyncio
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# ------------------- –ö–æ–Ω—Ñ–∏–≥ -------------------
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "433698201"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not TOKEN:
    raise ValueError("BOT_TOKEN not set!")

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# ------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã -------------------
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")],
        [KeyboardButton(text="üõ† –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")]
    ],
    resize_keyboard=True
)

cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]], 
    resize_keyboard=True
)

phone_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)],
              [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
    resize_keyboard=True
)

confirm_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
              [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
    resize_keyboard=True
)

# ------------------- –°–æ—Å—Ç–æ—è–Ω–∏—è -------------------
class Consultation(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_confirm = State()

class ProjectOrder(StatesGroup):
    waiting_for_description = State()
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_confirm = State()

# ------------------- Handlers -------------------
@router.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ö–ò–ú. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá", reply_markup=main_kb)

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå", reply_markup=main_kb)

# ------ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ------
@router.message(F.text == "‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
async def consultation_cmd(message: types.Message, state: FSMContext):
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? ‚úçÔ∏è", reply_markup=cancel_kb)
    await state.set_state(Consultation.waiting_for_name)

@router.message(Consultation.waiting_for_name)
async def consultation_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±", reply_markup=phone_kb)
    await state.set_state(Consultation.waiting_for_phone)

@router.message(Consultation.waiting_for_phone)
async def consultation_phone(message: types.Message, state: FSMContext):
    if message.contact:
        phone = message.contact.phone_number
    else:
        phone = message.text
    
    await state.update_data(phone=phone)
    data = await state.get_data()
    
    text = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏ üëá\n\n–ò–º—è: {data.get('name')}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}"
    await message.answer(text, reply_markup=confirm_kb)
    await state.set_state(Consultation.waiting_for_confirm)

@router.message(Consultation.waiting_for_confirm, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def consultation_confirm(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. üôå", reply_markup=main_kb)
    await bot.send_message(ADMIN_ID, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: {data.get('name')}, {data.get('phone')}")
    await state.clear()

# ------ –ó–∞–∫–∞–∑ –ø—Ä–æ–µ–∫—Ç–∞ ------
@router.message(F.text == "üõ† –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
async def project_cmd(message: types.Message, state: FSMContext):
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üìêüõã", reply_markup=cancel_kb)
    await state.set_state(ProjectOrder.waiting_for_description)

@router.message(ProjectOrder.waiting_for_description)
async def project_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? ‚úçÔ∏è", reply_markup=cancel_kb)
    await state.set_state(ProjectOrder.waiting_for_name)

@router.message(ProjectOrder.waiting_for_name)
async def project_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±", reply_markup=phone_kb)
    await state.set_state(ProjectOrder.waiting_for_phone)

@router.message(ProjectOrder.waiting_for_phone)
async def project_phone(message: types.Message, state: FSMContext):
    if message.contact:
        phone = message.contact.phone_number
    else:
        phone = message.text
    
    await state.update_data(phone=phone)
    data = await state.get_data()
    
    text = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏ üëá\n\n–ü—Ä–æ–µ–∫—Ç: {data.get('description')}\n–ò–º—è: {data.get('name')}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}"
    await message.answer(text, reply_markup=confirm_kb)
    await state.set_state(ProjectOrder.waiting_for_confirm)

@router.message(ProjectOrder.waiting_for_confirm, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def project_confirm(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. üôå", reply_markup=main_kb)
    await bot.send_message(ADMIN_ID, f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø—Ä–æ–µ–∫—Ç–∞: {data.get('name')}, {data.get('phone')}\n–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}")
    await state.clear()

# ------ –ö–æ–Ω—Ç–∞–∫—Ç—ã ------
@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts_cmd(message: types.Message):
    await message.answer("Email: kimpromebel@gmail.com\nTelegram: @mihailkuvila")

# ------ Fallback ------
@router.message()
async def fallback(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=main_kb)
    else:
        await message.answer("–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ñ–æ—Ä–º—É üìù –∏–ª–∏ ‚ùå –û—Ç–º–µ–Ω–∏—Ç–µ", reply_markup=cancel_kb)

# ------------------- FastAPI -------------------
app = FastAPI()

@app.on_event("startup")
async def on_startup():
    print("Bot starting up...")
    if WEBHOOK_URL and TOKEN:
        webhook_url = f"{WEBHOOK_URL}/webhook/{TOKEN}"
        try:
            await bot.set_webhook(webhook_url)
            print(f"Webhook set: {webhook_url}")
        except Exception as e:
            print(f"Webhook error: {e}")

@app.on_event("shutdown")
async def on_shutdown():
    print("Bot shutting down...")
    await bot.session.close()

@app.post("/webhook/{token}")
async def webhook(request: Request, token: str):
    if token == TOKEN:
        update = types.Update(**await request.json())
        await dp.feed_update(bot, update)
        return {"ok": True}
    return {"error": "Invalid token"}

@app.get("/")
async def health_check():
    return {"status": "ok", "bot": "running"}

if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8080))
    uvicorn.run(app, host="0.0.0.0", port=port)
